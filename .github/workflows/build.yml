name: Build & Release

on: push

jobs:
  build-linux:

    runs-on: ubuntu-latest

    container:
      image:  google/dart:latest

    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: pub get
    - name: Run tests
      run: |
        pub run test lib/util/test/ip_range_test.dart
    - name: Compile binary
      run: dart compile exe ./bin/scp_client.dart
    - name: publish dry run
      run: pub publish --dry-run
    - uses: actions/upload-artifact@v2
      with:
        name: scp_client_linux_amd64
        path: ./bin/scp_client.exe
    - name: Prepare Debian build
      run: |
        apt-get update
        apt-get install -y apt-transport-https wget rsync debhelper
        sh -c 'wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'
        sh -c 'wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list > /etc/apt/sources.list.d/dart_stable.list'
        apt-get update
        apt-get install -y dart
        mkdir -p debian-packaging
        rsync -av --exclude='debian-packaging' . debian-packaging/
    - name: Build Debian Package
      run: |
        cd debian-packaging
        dpkg-buildpackage -uc -us
    - uses: actions/upload-artifact@v2
      with:
        name: scp-client.deb
        path: scp-client_*_amd64.deb
  
  build-windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - uses: DanTup/gh-actions/setup-dart@master
    - name: Install dependencies
      run: pub get
    - name: Run tests
      run: |
        pub run test lib/util/test/ip_range_test.dart
    - name: Compile binary
      run: dart compile exe .\bin\scp_client.dart
    - name: publish dry run
      run: pub publish --dry-run
    - uses: actions/upload-artifact@v2
      with:
        name: scp_client.exe
        path: .\bin\scp_client.exe

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux]
    if: contains(github.ref, 'refs/tags/')
    steps:
    - name: Create a Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: true
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2
    - name: Upload Release Asset Windows
      id: upload-release-assets
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          scp_client.exe/scp_client.exe
          scp_client_linux_amd64/scp_client.exe
          scp-client.deb/scp-client_*_amd64.deb