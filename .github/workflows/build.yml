name: Build & Release

on: push

jobs:
  build-linux:

    runs-on: ubuntu-latest

    container:
      image:  google/dart:latest

    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: pub get
    - name: Run tests
      run: |
        pub run test lib/util/test/ip_range_test.dart
    - name: Compile binary
      run: dart compile exe ./bin/scp_client.dart
    - name: publish dry run
      run: pub publish --dry-run
    - uses: actions/upload-artifact@v1
      with:
        name: scp_client_linux_amd64
        path: ./bin/scp_client.exe
    - name: Prepare Debian build
      run: |
        sudo apt-get update
        sudo apt-get install apt-transport-https
        sudo sh -c 'wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'
        sudo sh -c 'wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list > /etc/apt/sources.list.d/dart_stable.list'
        sudo apt-get update
        sudo apt-get install debhelper dart
        mkdir -p debian-packaging
        rsync -av --exclude='debian-packaging' . debian-packaging/
    - name: Build Debian Package
      run: |
        cd debian-packaging
        dpkg-buildpackage -uc -us
    - uses: actions/upload-artifact@v1
      with:
        name: scp-client_0.0.1-0_amd64.deb
        path: ./scp-client_0.0.1_amd64.deb
  
  build-windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - uses: DanTup/gh-actions/setup-dart@master
    - name: Install dependencies
      run: pub get
    - name: Run tests
      run: |
        pub run test lib/util/test/ip_range_test.dart
    - name: Compile binary
      run: dart compile exe .\bin\scp_client.dart
    - name: publish dry run
      run: pub publish --dry-run
    - uses: actions/upload-artifact@v1
      with:
        name: scp_client.exe
        path: .\bin\scp_client.exe

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux]
    if: ${{ github.ref == 'refs/heads/master' }}
    steps:
    - name: Create a Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: true
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2
    - name: Upload Release Asset Windows
      id: upload-release-asset-windows 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./scp_client.exe/scp_client.exe
        asset_name: scp_client.exe
        asset_content_type: application/octet-stream
    - name: Upload Release Asset Linux
      id: upload-release-asset-linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./scp_client_linux_amd64/scp_client_linux_amd64
        asset_name: scp_client_linux_amd64
        asset_content_type: application/octet-stream